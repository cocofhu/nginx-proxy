# user nginx;  # 在容器中以 root 运行
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Docker 环境 DNS 解析器配置
    # 使用 Docker 内置 DNS + 公共 DNS
    resolver 127.0.0.11 8.8.8.8 8.8.4.4 valid=300s ipv6=off;
    resolver_timeout 10s;

    # 日志格式 - 优化缓冲避免卡顿
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # 访问日志 - 使用缓冲和异步写入
    access_log /var/log/nginx/access.log main buffer=64k flush=1s;
    
    # 错误日志缓冲
    error_log /var/log/nginx/error.log warn;

    # 基本配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # 取消上传的大小限制
    client_max_body_size 0;

    # 代理缓存目录
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=10g 
                     inactive=60m use_temp_path=off;

    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 包含动态生成的配置文件
    include /etc/nginx/conf.d/*.conf;

    # 默认服务器（处理未匹配的请求）
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        location / {
            return 444;  # 关闭连接
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}